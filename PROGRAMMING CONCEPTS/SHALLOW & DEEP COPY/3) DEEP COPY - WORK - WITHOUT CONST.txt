// EXAMPLE OF DEEP COPY - WORKS FINE WITH POINTER VARIABLES ALSO.
// IF I PUT CONST IN MY COPY CONSTRUCTOR, CODE IS NOT WORKING, OTHERWISE WORKING.
#include <iostream>
using namespace std;

class car
{
private:
    int *x1, x2;

public:
    car(int a, int b);
    car(car &obj);
    void set_x1(int x1);
    void set_x2(int x2);
    int get_x1();
    int get_x2();
};

car :: car(int a, int b)
{
    x1 = new int;
    *x1 = a;
    x2 = b;
}

car :: car(car &obj)
{
    x1 = new int;
    *x1 = obj.get_x1();
    x2 = obj.get_x2();
}

void car :: set_x1(int x)
{
    *x1 = x;
}

void car :: set_x2(int y)
{
    x2 = y;
}

int car :: get_x1()
{
    return *x1;
}

int car :: get_x2()
{
    return x2;
}

int main()
{
    car obj1(8, 4);

    cout << obj1.get_x1() << endl;
    cout << obj1.get_x2() << endl;

    car obj2 = obj1;

    cout << obj2.get_x1() << endl;
    cout << obj2.get_x2() << endl;

    obj1.set_x1(122);

    cout << endl << endl;

    cout << obj1.get_x1() << endl;
    cout << obj1.get_x2() << endl;
    cout << obj2.get_x1() << endl;
    cout << obj2.get_x2() << endl;
}
