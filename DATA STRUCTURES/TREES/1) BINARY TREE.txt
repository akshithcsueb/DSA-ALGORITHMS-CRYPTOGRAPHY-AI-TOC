#include <iostream>
using namespace std;

struct node
{
    node *left = nullptr;
    int data;
    node *right = nullptr;
};

class Binary_Tree
{
public:
    void add(int value);
    void del(int value);
    void check(int value);
    void display(int order_value);

private:
    node *root = nullptr;
    node *temp = nullptr;
    node* del_helper(node *tree, int value);
    node* find_min(node *tree);
    void display_helper(node *tree, int order_value);
};

void Binary_Tree :: add(int value)
{
    if(root == nullptr)
    {
        root = new node;
        root->data = value;
        return;
    }

    temp = root;

    while(true)
    {
        if(value < temp->data)
        {
            if(temp->left == nullptr)
            {
                temp->left = new node;
                temp = temp->left;
                temp->data = value;
                return;
            }
            else
            {
                temp = temp->left;
            }
        }
        else
        {
            if(temp->right == nullptr)
            {
                temp->right = new node;
                temp = temp->right;
                temp->data = value;
                return;
            }
            else
            {
                temp = temp->right;
            }
        }
    }
}

void Binary_Tree :: del(int value)
{
    // IF TREE IS EMPTY
    if(root == nullptr)
    {
        cout << "Tree is empty - nothing to delete" << endl;
        return;
    }
    // IF TREE HAS VALUES
    else
    {
        del_helper(root, value);
    }
}

node* Binary_Tree :: del_helper(node *tree, int value)
{
    // IF VALUE IS NOT IN TREE
    if(tree == nullptr)
    {
        cout << value << " is not in tree to delete" << endl;
        return nullptr;
    }

    if(value < tree->data)
    {
        tree->left = del_helper(tree->left, value);
    }
    else if(value > tree->data)
    {
        tree->right = del_helper(tree->right, value);
    }
    else if(value == tree->data)
    {
        if(tree->left == nullptr && tree->right == nullptr)
        {
            delete tree;
            tree = nullptr;
        }
        else if(tree->left == nullptr && tree->right != nullptr)
        {
            temp = tree->right;
            delete tree;
            tree = temp;
        }
        else if(tree->left != nullptr && tree->right == nullptr)
        {
            temp = tree->left;
            delete tree;
            tree = temp;
        }
        else if(tree->left != nullptr && tree->right != nullptr)
        {
            temp = find_min(tree->right);
            tree->data = temp->data;
            tree->right = del_helper(tree->right, tree->data);
        }

    }
    return tree;
}

// THIS FUNCTION FINDS AND RETURNS MINIMUM VALUE ADDRESS OF RIGHT SUBTREE OF VALUE TO BE DELETED
node* Binary_Tree :: find_min(node *tree)
{
    node *curr = tree;

    while(curr && curr->left != nullptr)
    {
        curr = curr->left;
    }

    return curr;
}

void Binary_Tree :: check(int value)
{
    // IF TREE IS EMPTY
    if(root == nullptr)
    {
        cout << "Tree is empty - nothing to check" << endl;
        return;
    }

    // IF TREE HAS VALUES
    temp = root;

    while(true)
    {
        if(value == temp->data)
        {
            cout << value << " is in tree" << endl;
            return;
        }
        else if(value < temp->data)
        {
            if(temp->left == nullptr)
            {
                cout << value << " is not in tree" << endl;
                return;
            }
            else
            {
                temp = temp->left;
            }
        }
        else if(value > temp->data)
        {
            if(temp->right == nullptr)
            {
                cout << value << " is not in tree" << endl;
                return;
            }
            else
            {
                temp = temp->right;
            }
        }
    }
}

void Binary_Tree :: display(int value)
{
    // IF TREE IS EMPTY
    if(root == nullptr)
    {
        cout << "Tree is empty - nothing to display" << endl;
    }
    // IF TREE HAS VALUES
    else
    {
        display_helper(root, value);
    }
}

void Binary_Tree :: display_helper(node *tree, int order_value)
{
    // BASE CONDITION TO STOP RECURSION
    if(tree == nullptr)
    {
        return;
    }

    // PRE-ORDER
    if(order_value == 0)
    {
        cout << tree->data << endl;
        display_helper(tree->left, order_value);
        display_helper(tree->right, order_value);
    }
    // IN-ORDER
    else if(order_value == 1)
    {
        display_helper(tree->left, order_value);
        cout << tree->data << endl;
        display_helper(tree->right, order_value);
    }
    // POST-ORDER
    else if(order_value == 2)
    {
        display_helper(tree->left, order_value);
        display_helper(tree->right, order_value);
        cout << tree->data << endl;
    }
}

int main()
{
    Binary_Tree obj;

    obj.add(8);
    obj.add(5);
    obj.add(2);
    obj.add(7);
    obj.add(19);
    obj.add(12);
    obj.add(21);

    obj.del(1);

    obj.display(0);
}