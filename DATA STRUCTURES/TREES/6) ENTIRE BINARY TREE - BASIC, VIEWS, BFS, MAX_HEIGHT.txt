#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;

struct node
{
    node *left = nullptr;
    int data;
    node *right = nullptr;
};

class binary_tree
{
public:
    void add(int item);
    void del(int item);
    void check(int item);
    void display(int order);
    void left_view();
    void right_view();
    void top_view();
    void bottom_view();
    void maximum_height();
    void level_order_display();

private:
    node* del_helper(node *curr, int item);
    node* del_right_min_helper(node *curr);
    void display_helper(node *curr, int order);
    void left_view_helper(node *curr, int level);
    void right_view_helper(node *curr, int level);
    void top_view_helper(node *curr);
    void bottom_view_helper(node *curr);
    int maximum_height_helper(node *curr);
    void level_order_display_helper(node *curr);
    node *root = nullptr;
    node *temp = nullptr;
    vector <int> out;
    queue <pair<node*, int>> all_elements;
    map <int, int> print_elements;
};

void binary_tree :: add(int item)
{
    if(root == nullptr)
    {
        root = new node;
        root->data = item;
    }
    else
    {
        temp = root;

        while(true)
        {
            if(item < temp->data)
            {
                if(temp->left == nullptr)
                {
                    temp->left = new node;
                    temp = temp->left;
                    temp->data = item;
                    return;
                }

                temp = temp->left;
            }
            else if(item > temp->data)
            {
                if(temp->right == nullptr)
                {
                    temp->right = new node;
                    temp = temp->right;
                    temp->data = item;
                    return;
                }

                temp = temp->right;
            }
        }
    }
}

void binary_tree :: del(int item)
{
    if(root == nullptr)
    {
        cout << "Tree is empty - nothing to delete" << endl;
        return;
    }

    del_helper(root, item);
}

node* binary_tree :: del_helper(node *curr, int item)
{
    if(curr == nullptr)
    {
        cout << item << " is not in tree to delete" << endl;
        return nullptr;
    }

    if(item < curr->data)
    {
        curr->left = del_helper(curr->left, item);
    }
    else if(item > curr->data)
    {
        curr->right = del_helper(curr->right, item);
    }
    else if(item == curr->data)
    {
        if(curr->left == nullptr && curr->right == nullptr)
        {
            delete curr;
            curr = nullptr;
        }
        else if(curr->left == nullptr && curr->right != nullptr)
        {
            temp = curr->right;
            delete curr;
            curr = temp;
        }
        else if(curr->left != nullptr && curr->right == nullptr)
        {
            temp = curr->left;
            delete curr;
            curr = temp;
        }
        else if(curr->left != nullptr && curr->right != nullptr)
        {
            temp = del_right_min_helper(curr->right);
            curr->data = temp->data;
            curr->right = del_helper(curr->right, curr->data);
        }

    }
    return curr;
}

node* binary_tree :: del_right_min_helper(node *curr)
{
    while(curr->left != nullptr)
    {
        curr = curr->left;
    }

    return curr;
}

void binary_tree :: check(int item)
{
    if(root == nullptr)
    {
        cout << "Tree is empty - nothing to check" << endl;
        return;
    }

    temp = root;

    while (temp != nullptr)
    {
        if(item == temp->data)
        {
            cout << item << " is in tree" << endl;
            return;
        }
        else if(item < temp->data)
        {
            temp = temp->left;
        }
        else if(item > temp->data)
        {
            temp = temp->right;
        }
    }
    cout << item << " is not in tree" << endl;
}

void binary_tree :: display(int order)
{
    if(root == nullptr)
    {
        cout << "Tree is empty - nothing to display" << endl;
        return;
    }

    display_helper(root, order);
}

void binary_tree :: display_helper(node *curr, int order)
{
    if(curr == nullptr)
    {
        return;
    }

    if(order == 0)
    {
        cout << curr->data << endl;
        display_helper(curr->left, order);
        display_helper(curr->right, order);
    }
    else if(order == 1)
    {
        display_helper(curr->left, order);
        cout << curr->data << endl;
        display_helper(curr->right, order);
    }
    else if(order == 2)
    {
        display_helper(curr->left, order);
        display_helper(curr->right, order);
        cout << curr->data << endl;
    }
}

void binary_tree :: left_view()
{
    if(root == nullptr)
    {
        cout << "Tree is empty - I can't display left view" << endl;
    }
    else
    {
        left_view_helper(root, 0);

        for(int i=0; i<out.size(); i++)
        {
            cout << out[i] << endl;
        }

        out.clear();
    }
}

void binary_tree :: left_view_helper(node *curr, int level)
{
    if(curr == nullptr)
    {
        return;
    }

    if(out.size() == level)
    {
        out.push_back(curr->data);
    }
    left_view_helper(curr->left, level+1);
    left_view_helper(curr->right, level+1);
}

void binary_tree :: right_view()
{
    if(root == nullptr)
    {
        cout << "Tree is empty - I can't display right side view" << endl;
    }
    else
    {
        right_view_helper(root, 0);

        for(int i=0; i<out.size(); i++)
        {
            cout << out[i] << endl;
        }

        out.clear();
    }
}

void binary_tree :: right_view_helper(node *curr, int level)
{
    if(curr == nullptr)
    {
        return;
    }

    if(out.size() == level)
    {
        out.push_back(curr->data);
    }
    right_view_helper(curr->right, level+1);
    right_view_helper(curr->left, level+1);
}

void binary_tree :: top_view()
{
    if(root == nullptr)
    {
        cout << "Tree is empty - I can't display top view" << endl;
        return;
    }

    top_view_helper(root);
}

void binary_tree :: top_view_helper(node *curr)
{
    all_elements.push({curr, 0});

    while(!all_elements.empty())
    {
        auto i = all_elements.front();
        all_elements.pop();

        temp = i.first;
        int line = i.second;

        if(print_elements.find(line) == print_elements.end())
        {
            print_elements.insert(pair<int, int> (line, temp->data));
        }

        if(temp->left != nullptr)
        {
            all_elements.push({temp->left, line-1});
        }

        if(temp->right != nullptr)
        {
            all_elements.push({temp->right, line+1});
        }
    }

    for(auto i = print_elements.begin(); i != print_elements.end(); i++)
    {
        cout << i->second << endl;
    }

    print_elements.clear();
}

void binary_tree :: bottom_view()
{
    if(root == nullptr)
    {
        cout << "Tree is empty - I can't display bottom view" << endl;
        return;
    }

    bottom_view_helper(root);
}

void binary_tree :: bottom_view_helper(node *curr)
{
    all_elements.push({curr, 0});

    while(!all_elements.empty())
    {
        auto i = all_elements.front();
        all_elements.pop();

        temp = i.first;
        int line = i.second;

        print_elements[line] = temp->data;

        if(temp->left != nullptr)
        {
            all_elements.push({temp->left, line-1});
        }

        if(temp->right != nullptr)
        {
            all_elements.push({temp->right, line+1});
        }
    }

    for(auto i = print_elements.begin(); i != print_elements.end(); i++)
    {
        cout << i->second << endl;
    }

    print_elements.clear();
}

void binary_tree :: maximum_height()
{
    if(root == nullptr)
    {
        cout << "Tree is empty - hence maximum height is 0" << endl;
        return;
    }

    int max_height = maximum_height_helper(root);

    cout << "The maximum height of the tree is " << max_height << endl;
}

int binary_tree :: maximum_height_helper(node *curr)
{
    if(curr == nullptr)
    {
        return 0;
    }

    int left_height = maximum_height_helper(curr->left);
    int right_height = maximum_height_helper(curr->right);

    return 1 + max(left_height, right_height);
}

void binary_tree :: level_order_display()
{
    if(root == nullptr)
    {
        cout << "Tree is empty - nothing to display" << endl;
        return;
    }

    level_order_display_helper(root);
}

void binary_tree :: level_order_display_helper(node *curr)
{
    all_elements.push({curr, curr->data});

    while(!all_elements.empty())
    {
        auto i = all_elements.front();
        all_elements.pop();

        temp = i.first;
        int value = i.second;

        cout << value << endl;

        if(temp->left != nullptr)
        {
            all_elements.push({temp->left, temp->left->data});
        }

        if(temp->right != nullptr)
        {
            all_elements.push({temp->right, temp->right->data});
        }
    }
}

int main()
{
    binary_tree obj;

    obj.add(8);
    obj.add(5);
    obj.add(2);
    obj.add(7);
    obj.add(19);
    obj.add(12);
    obj.add(21);

    obj.level_order_display();
}