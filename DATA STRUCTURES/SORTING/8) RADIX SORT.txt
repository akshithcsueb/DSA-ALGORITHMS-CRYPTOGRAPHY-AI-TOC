#include <bits/stdc++.h>
using namespace std;

// To give LSB to MSB values
int digit_value(int value, int position)
{
    int temp;

    while(position != 0)
    {
        temp = value % 10;
        value = value/10;
        position--;
    }

    return temp;
}

void radix_sort_helper(vector<int> &array, vector<int> count_array, vector<int> output_array, int position)
{
    // Step - 2.2
    int index_count;
    for(int i=0; i<array.size(); i++)
    {
        index_count = digit_value(array[i], position);
        count_array[index_count]++;
    }

    // Step - 2.3
    if(count_array.size() > 1)
    {
        for(int i=1; i<count_array.size(); i++)
        {
            count_array[i] = count_array[i] + count_array[i-1];
        }
    }

    // Step - 2.5
    int index_output;
    for(int i=array.size()-1; i>=0; i--)
    {
        index_count = digit_value(array[i], position);
        count_array[index_count]--;
        output_array[count_array[index_count]] = array[i];
    }

    // Step - 2.6
    for(int i=0; i<array.size(); i++)
    {
        array[i] = output_array[i];
    }
}

void radix_sort(vector<int> &array)
{
    // Step - 1.1
    int start_value = array[0];
    int end_value = array[0];
    for(int i=0; i<array.size(); i++)
    {
        if(array[i] < start_value)
        {
            start_value = array[i];
        }
        else if(array[i] > end_value)
        {
            end_value = array[i];
        }
    }

    // If given array has negative values this will execute to normalize the array to convert into positive array
    if(start_value < 0)
    {
        for(int i=0; i<array.size(); i++)
        {
            array[i] = array[i] + abs(start_value);
        }

        end_value = end_value + abs(start_value);
    }

    // Step - 1.2
    int max_value = end_value;
    int count = 0;
    while(max_value != 0)
    {
        max_value = max_value/10;
        count++;
    }

    // Step - 2.1, 2.4, 3.1
    vector<int> count_array(10, 0);
    vector<int> output_array(array.size());
    int position = 1;
    while(count != 0)
    {
        radix_sort_helper(array, count_array, output_array, position);
        position++;
        count--;
    }

    // If given array has negative values we are normalizing the array by converting back to original from positive to negative
    if(start_value < 0)
    {
        for(int i=0; i<array.size(); i++)
        {
            array[i] = array[i] - abs(start_value);
        }
    }
}

int main()
{
    cout << "How many elements you need to sort - " << endl;
    int size;
    cin >> size;

    cout << "Enter elements one by one - " << endl;
    vector<int> array(size);
    for(int i=0; i<size; i++)
    {
        int temp;
        cin >> temp;
        array[i] = temp;
    }

    radix_sort(array);

    for(int i=0; i<size; i++)
    {
        cout << array[i] << ", ";
    }
}

// Space Complexity - O(k+n)
// Time Complexity - O(d * (k+n))